// Generated by CoffeeScript 1.7.1
(function() {
  this.Brainfuckme = (function() {
    function Brainfuckme() {
      this.reset();
    }

    Brainfuckme.prototype._trimCode = function(source) {
      return source.replace(/[^+-.,<>\[\]]+/g, '');
    };

    Brainfuckme.prototype._operate = function(commands, input) {
      var _results;
      _results = [];
      while (this.cursor < commands.length) {
        switch (commands[this.cursor]) {
          case '+':
            _results.push(this._increaseValue());
            break;
          case '-':
            _results.push(this._decreaseValue());
            break;
          case '>':
            _results.push(this._increasePointer());
            break;
          case '<':
            _results.push(this._decreasePointer());
            break;
          case ',':
            _results.push(this._assignInput(input));
            break;
          case '.':
            _results.push(this._assignOutput());
            break;
          case '[':
            _results.push(this._openLoop(commands));
            break;
          case ']':
            _results.push(this._closeLoop(commands));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Brainfuckme.prototype._increaseValue = function() {
      if (!(this.value() || (this.value() != null))) {
        this.memory[this.pointer] = 0;
      }
      this.memory[this.pointer]++;
      return this.cursor++;
    };

    Brainfuckme.prototype._decreaseValue = function() {
      if (!(this.value() || (this.value() != null))) {
        this.memory[this.pointer] = 0;
      }
      if (!(this.value() <= 0)) {
        this.memory[this.pointer]--;
      }
      return this.cursor++;
    };

    Brainfuckme.prototype._increasePointer = function() {
      this.pointer++;
      if (!this.value()) {
        this.memory[this.pointer] = 0;
      }
      return this.cursor++;
    };

    Brainfuckme.prototype._decreasePointer = function() {
      if (!(this.pointer <= 0)) {
        this.pointer--;
      }
      return this.cursor++;
    };

    Brainfuckme.prototype._assignInput = function(input) {
      var value;
      value = input.shift();
      this.memory[this.pointer] = value ? value : 0;
      return this.cursor++;
    };

    Brainfuckme.prototype._assignOutput = function() {
      this.output.push(this.value());
      return this.cursor++;
    };

    Brainfuckme.prototype._openLoop = function(commands) {
      if (this.value() === 0) {
        return this.cursor = this._findMatch(commands, this.cursor, commands.length - 1, '[', ']') + 1;
      } else {
        return this.cursor++;
      }
    };

    Brainfuckme.prototype._closeLoop = function(commands) {
      return this.cursor = this._findMatch(commands, this.cursor, 0, ']', '[');
    };

    Brainfuckme.prototype._findMatch = function(commands, from, to, pair, target) {
      var count, i, _i;
      count = 0;
      for (i = _i = from; from <= to ? _i <= to : _i >= to; i = from <= to ? ++_i : --_i) {
        if (commands[i] === pair) {
          count++;
        } else if (commands[i] === target) {
          count--;
          if (count === 0) {
            return i;
          }
        }
      }
      return NaN;
    };

    Brainfuckme.prototype.value = function() {
      return this.memory[this.pointer];
    };

    Brainfuckme.prototype.run = function(_src, _input, _callback) {
      var commands;
      if (_input) {
        this.input = _input.slice();
      }
      commands = this._trimCode(_src);
      this._operate(commands, this.input);
      if (_callback) {
        _callback(this.output, this.outputToString());
      }
      return this.output;
    };

    Brainfuckme.prototype.resume = function(_src, _input, _callback) {
      this.cursor = 0;
      this.run(_src, _input);
      if (_callback) {
        return _callback(this.output, this.outputToString());
      }
    };

    Brainfuckme.prototype.outputToString = function() {
      var chars, n, _i, _len, _ref;
      chars = [];
      _ref = this.output;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        chars.push(String.fromCharCode(n));
      }
      return chars.join("");
    };

    Brainfuckme.prototype.inputToArray = function(string) {
      var array, chars, i, _i, _len;
      array = [];
      chars = string.split('');
      for (_i = 0, _len = chars.length; _i < _len; _i++) {
        i = chars[_i];
        array.push(i.charCodeAt(0));
      }
      return array;
    };

    Brainfuckme.prototype.reset = function() {
      this.memory = new Array();
      this.memory[0] = 0;
      this.pointer = 0;
      this.input = new Array();
      this.output = new Array();
      return this.cursor = 0;
    };

    return Brainfuckme;

  })();

  if (module) {
    module.exports = Brainfuckme;
  }

}).call(this);
